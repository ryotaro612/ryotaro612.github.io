<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>言語モデル on Blanket</title>
    <link>https://nryotaro.dev/tags/%E8%A8%80%E8%AA%9E%E3%83%A2%E3%83%87%E3%83%AB/</link>
    <description>Recent content in 言語モデル on Blanket</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 07 Aug 2020 16:45:55 +0900</lastBuildDate><atom:link href="https://nryotaro.dev/tags/%E8%A8%80%E8%AA%9E%E3%83%A2%E3%83%87%E3%83%AB/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>概要 Improving Language Understanding by Generative Pre-Training</title>
      <link>https://nryotaro.dev/posts/improving_language_understanding_by_generative_pre_training/</link>
      <pubDate>Fri, 07 Aug 2020 16:45:55 +0900</pubDate>
      
      <guid>https://nryotaro.dev/posts/improving_language_understanding_by_generative_pre_training/</guid>
      <description>&lt;h3 id=&#34;概要&#34;&gt;概要&lt;/h3&gt;
&lt;p&gt;GPTの略称で知られる教師なしの事前学習である。
評価実験では、全結合層を1層追加したファインチューニングで、12の自然言語処理タスクのうち9つについて、当時のSoTAを上まわる性能を発揮した。
ネットワークには&lt;a href=&#34;https://proceedings.neurips.cc/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf&#34;&gt;Transformer&lt;/a&gt;のデコーダー部分が使われている。
ファインチューニング時には、事前学習の効果を生かすために、特徴の入力をモデルのアーキテクチャに合わせ、アーキテクチャの変更を最小限におさえる。
推論タスクであれば前提や仮定、テキストの類似性判定であれば比較する2つのテキストといった異種の特徴をデリミタで連結した系列を作り、モデルに入力する。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Annotated Transformer (2018)</title>
      <link>https://nryotaro.dev/posts/the_annotated_transformer/</link>
      <pubDate>Mon, 01 Jul 2019 12:57:09 +0900</pubDate>
      
      <guid>https://nryotaro.dev/posts/the_annotated_transformer/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/1706.03762&#34;&gt;Attention Is All You Need&lt;/a&gt;で提案されたTransformerのアーキテクチャを、サンプルコードとオリジナルの論文の引用を交えて解説している。 PyTorchで実装されている。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>抄訳 Regularizing and Optimizing LSTM Language Models(2017)</title>
      <link>https://nryotaro.dev/posts/regularizing_and_optimizing_lstm_language_models/</link>
      <pubDate>Fri, 23 Nov 2018 19:27:00 +0900</pubDate>
      
      <guid>https://nryotaro.dev/posts/regularizing_and_optimizing_lstm_language_models/</guid>
      <description>&lt;p&gt;LSTMをつかった言語モデルに正規化と最適化を適用し、実験でperplexityを評価した。
LSTMの実装に変更を加えない手法なので、NVIDIAやcuDNNなどの高速でブラックボックスなライブラリで実装できる。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
